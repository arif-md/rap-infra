name: Infra - Provision and Deploy (azd)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'azure.yaml'
      - 'main.bicep'
      - 'main.parameters.json'
      - 'app/**'
      - 'modules/**'
      - 'shared/**'
      - 'scripts/**'
  repository_dispatch:
    types: [ frontend-image-pushed ]

env:
  AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
  AZURE_ACR_NAME: ${{ vars.AZURE_ACR_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test
    outputs:
      frontendFqdn: ${{ steps.expose_endpoints.outputs.frontendFqdn }}
    permissions:
      id-token: write   # for OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify required Azure secrets
        run: |
          [ -n "${{ secrets.AZURE_CLIENT_ID }}" ] || { echo "Missing secret: AZURE_CLIENT_ID"; exit 1; }
          [ -n "${{ secrets.AZURE_TENANT_ID }}" ] || { echo "Missing secret: AZURE_TENANT_ID"; exit 1; }
          [ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] || { echo "Missing secret: AZURE_SUBSCRIPTION_ID"; exit 1; }

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure Developer CLI (azd)
        run: |
          curl -fsSL https://aka.ms/install-azd.sh | bash
          azd version

      - name: Show Azure identity
        run: |
          echo "Azure CLI account:" && az account show --output table || true

      - name: Acquire GitHub OIDC token
        id: gh_oidc
        uses: actions/github-script@v7
        with:
          script: |
            const jwt = await core.getIDToken('api://AzureADTokenExchange');
            core.setOutput('jwt', jwt);

      - name: azd auth login (OIDC)
        run: |
          azd auth login \
            --client-id "${{ secrets.AZURE_CLIENT_ID }}" \
            --tenant-id "${{ secrets.AZURE_TENANT_ID }}" \
            --federated-token "${{ steps.gh_oidc.outputs.jwt }}"

      - name: Verify azd authentication
        run: |
          if azd auth token -h >/dev/null 2>&1; then
            if ! azd auth token -o json >/dev/null 2>&1; then
              echo "azd is not authenticated. Check OIDC federated credential and permissions." >&2
              exit 1
            fi
            echo "azd authentication verified via token retrieval."
          else
            echo "Skipping azd token check (command not available in this azd version)."
          fi

      - name: Validate Azure login
        run: |
          EXPECTED_SUB="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          EXPECTED_TENANT="${{ secrets.AZURE_TENANT_ID }}"
          SUB=$(az account show --query id -o tsv 2>/dev/null || true)
          TENANT=$(az account show --query tenantId -o tsv 2>/dev/null || true)
          if [ -z "$SUB" ]; then
            echo "Azure CLI not logged in. Ensure azure/login succeeded and federated credentials are configured for this environment." >&2
            exit 1
          fi
          if [ "$SUB" != "$EXPECTED_SUB" ]; then
            echo "Logged into unexpected subscription: $SUB (expected $EXPECTED_SUB). Check azure/login inputs and the federated credential subject." >&2
            exit 1
          fi
          if [ -n "$EXPECTED_TENANT" ] && [ "$TENANT" != "$EXPECTED_TENANT" ]; then
            echo "Logged into unexpected tenant: $TENANT (expected $EXPECTED_TENANT). Check azure/login inputs and the federated credential subject." >&2
            exit 1
          fi
          echo "Validated Azure login. Subscription: $SUB  Tenant: $TENANT"

      - name: Show active principal details
        run: |
          {
            echo "### Active principal details"
            echo
            echo "Azure CLI (az) context:"
            az account show --output table || echo "(failed to read az account)"
            echo
            if azd auth show -h >/dev/null 2>&1; then
              echo "azd auth show:"
              azd auth show || echo "(failed to read azd auth show)"
            else
              echo "azd auth show not available in this azd version."
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Enable azd alpha features (deployment stacks)
        run: azd config set alpha.deployment.stacks on

      - name: Ensure AZURE_ENV_NAME default
        run: |
          if [ -z "$AZURE_ENV_NAME" ]; then
            NAME="${GITHUB_REF_NAME:-ci}"
            SAFE=$(echo "$NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
            echo "AZURE_ENV_NAME=$SAFE" >> $GITHUB_ENV
            echo "Using fallback AZURE_ENV_NAME: $SAFE"
          else
            echo "Using provided AZURE_ENV_NAME: $AZURE_ENV_NAME"
          fi

      - name: Prepare azd environment
        run: |
          azd env new $AZURE_ENV_NAME --no-prompt || true
          azd env set AZURE_ENV_NAME "$AZURE_ENV_NAME"
          azd env set AZURE_RESOURCE_GROUP "$AZURE_RESOURCE_GROUP"
          azd env set AZURE_LOCATION "$AZURE_LOCATION"
          azd env set AZURE_ACR_NAME "$AZURE_ACR_NAME"
          azd env set AZURE_SUBSCRIPTION_ID "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Set default image when not provided
        if: github.event_name != 'repository_dispatch'
        run: |
          # Avoid azd attempting to build from this infra repo by providing a placeholder image
          azd env set SERVICE_FRONTEND_IMAGE_NAME "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"

      - name: Ensure ACR exists (preprovision)
        shell: bash
        run: |
          chmod +x ./scripts/ensure-acr.sh
          ./scripts/ensure-acr.sh

      - name: Accept image from repository_dispatch (optional)
        if: github.event_name == 'repository_dispatch' && github.event.action == 'frontend-image-pushed'
        run: |
          IMG='${{ github.event.client_payload.image }}'
          if [ -n "$IMG" ]; then
            echo "Using pre-built image: $IMG"
            azd env set SERVICE_FRONTEND_IMAGE_NAME "$IMG"
          fi

      - name: azd up (provision + deploy)
        run: azd up --no-prompt --environment "$AZURE_ENV_NAME"

      - name: Expose deployment endpoints
        id: expose_endpoints
        run: |
          FQDN=$(azd env get-value frontendFqdn || true)
          echo "frontendFqdn=$FQDN" >> $GITHUB_OUTPUT
          echo "DEPLOY_URL=$FQDN" >> $GITHUB_ENV
          {
            echo "### Deployment endpoints"
            echo ""
            if [ -n "$FQDN" ]; then
              echo "- Frontend: https://$FQDN"
            else
              echo "- Frontend: (not available)"
            fi
          } >> $GITHUB_STEP_SUMMARY
